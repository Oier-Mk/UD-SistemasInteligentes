if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1]+1,state[2]),problem)
# Clear environment and console
rm(list=ls())
onsole
rm(list=ls())
onsole
rm(list=ls())
onsole
rm(list=ls())
onsole
rm(list=ls())
onsole
rm(list=ls())
onsole
rm(list=ls())
onsole
rm(list=ls())
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/laberinto.txt")
View(problem)
problem[["table"]]
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/laberinto.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/laberinto.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/laberinto.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/laberinto.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
expand.node = function(current_node, actions_possible, problem) {
successors <- list()
for (i in 1 : nrow(actions_possible)) {
action <- actions_possible[i, ]
if (is.applicable(current_node$state, action, problem)) {
successor               <- list()
successor$parent        <- current_node
successor$state         <- effect(current_node$state, action, problem)
successor$actions       <- rbind(current_node$actions, action)
successor$depth         <- current_node$depth + 1
successor$cost          <- current_node$cost + get.cost(action, current_node$state, problem)
successor$evaluation    <- get.evaluation(successor$state, problem)
successors <- append(successors, list(successor))
}
}
return(successors)
}
local.expand.node = function(current_node, actions_possible, problem) {
successors <- list()
for (i in 1 : nrow(actions_possible)) {
action <- actions_possible[i, ]
if (is.applicable(current_node$state, action, problem)) {
successor               <- list()
successor$parent        <- current_node
successor$state         <- effect(current_node$state, action, problem)
successor$actions       <- rbind(current_node$actions, action)
successor$depth         <- current_node$depth + 1
successor$cost          <- get.cost(action, current_node$state, problem)
successor$evaluation    <- get.evaluation(successor$state, problem)
successors <- append(successors, list(successor))
}
}
return(successors)
}
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
View(problem)
problem[["table"]]
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
get.state <- function(coordenadas, problem){
return(problem$table[coordenadas[2],coordenadas[1]])
#return(problem$table[coordenadas[1],coordenadas[2]])
}
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
get.state <- function(coordenadas, problem){
return(problem$table[coordenadas[2],coordenadas[1]])
#return(problem$table[coordenadas[1],coordenadas[2]])
}
state = c(1,7)
condicion1 <- problem$size[1] > state[1]+1 #comprobacion de que no esta en el tope de abajo
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1]+1,state[2]),problem)
get.state(state,problem)
get.state(c(state[1]+1,state[2]),problem)
get.state <- function(coordenadas, problem){
return(problem$table[coordenadas[2],coordenadas[1]])
#return(problem$table[coordenadas[1],coordenadas[2]])
}
get.state(c(state[1]+1,state[2]),problem)
get.state(state,problem)
get.state <- function(coordenadas, problem){
print(coordenadas[2])
print(coordenadas[1])
return(problem$table[coordenadas[2],coordenadas[1]])
#return(problem$table[coordenadas[1],coordenadas[2]])
}
state = c(1,7)
condicion1 <- problem$size[1] > state[1]+1 #comprobacion de que no esta en el tope de abajo
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1]+1,state[2]),problem)
get.state(state,problem)
get.state <- function(coordenadas, problem){
print(coordenadas[2])
print(coordenadas[1])
print(problem$table[coordenadas[2],coordenadas[1]])
return(problem$table[coordenadas[2],coordenadas[1]])
#return(problem$table[coordenadas[1],coordenadas[2]])
}
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
v <- c(1,1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
v <- c(1,1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- c(1,1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- c(1,1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
v <- problem$state_initial#c(1,1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial#c(1,1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial #c(1,1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial #c(1,1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
