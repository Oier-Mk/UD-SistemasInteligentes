)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat = data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat = data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# create a dataset
dat = data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# install.packages("ggplot2")
library(ggplot2)
# install.packages("dplyr")
library(dplyr)
# install.packages("hrbrthemes")
library(hrbrthemes)
#Carga de datos previamente limpiados
df <- read.csv ("/Users/aidagomezbuenoberezo/dataset-limpio.csv", header=TRUE, sep=",")
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
summary(df)
df$Compras = df$NumWebPurchases + df$NumStorePurchases
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
select(df$Recency, df$Compras)
df$Compras = as.integer(df$Compras)
)
select(df$Recency, df$Compras)
df$Compras = as.integer(df$Compras)
select(df$Recency, df$Compras)
select(as.integer(df$Recency), as.integer(df$Compras))
View(df)
View(df)
df$Products = df$Food + df$MntWines
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Products
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
data = data.frame(
name=df$Recency,
value=df$Products
)
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados")
data = data.frame(
name=df$Recency,
value=df$Products
)
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados")
p
data = data.frame(
name=df$Recency,
value=df$Products
)
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + theme_pink()
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + col("pink")
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="pink") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") +
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="pink") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") +
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="pink") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") +
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p <- ggplot(data, aes(x=name, y=value, fill=name, colour="pink")) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="pink") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="", fill="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p + theme_classic()
data1 = data.frame(
name=df$Childhome,
value=df$Products
)
p <- ggplot(data1, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p + theme_classic()
data1 = data.frame(
name=df$Products,
value=df$Childhome
)
p <- ggplot(data1, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p + theme_classic()
data1 = data.frame(
name=df$Childhome,
value=df$Products
)
p <- ggplot(data1, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Niños por familia") + ylab("Productos comprados") + ggtitle("Amplitud de familia y volumen de compra")
p + theme_classic()
#Nivel académico de clientes con mayores ingresos anuales (dejando fuera a outlier y perteneciendo al 3er cuartil)
filtro=df$Income>68522&df$Income<666666
dff = df[filtro,]
#Visualización en violín de ingresos por familia y la cantidad de productos comprados
filtro=df$Income>68522&df$Income<666666
dincome = df[filtro, ]
data2 = data.frame(
name=dincome$Income,
value=dincome$Products
)
#Visualización en violín de ingresos altos por familia y la cantidad de productos comprados
filtro=df$Income>68522&df$Income<666666
dincome = df[filtro, ]
data2 = data.frame(
name=dincome$Income,
value=dincome$Products
)
p <- ggplot(data2, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Ingresos altos por familia") + ylab("Productos comprados") + ggtitle("Gran poder adquisitivo y volumen de compra")
p + theme_classic()
#Correlación de gasto en dulces con el número de hijos
g3 <- ggplot(data=dincome, aes(x=dincome$Income, y=dincome$Products)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g3+xlab("Ingresos")+ylab("Volumen de compra")+ggtitle("Relación de las compras de los clientes con mayor poder adquisitivo")
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
table(df$Years, df$Drinks)
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
table(df$Years)
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Years))
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Years, df$Drinks))
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks))
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505
ddrinks = df[filtro, ]
as.data.frame(table(ddrinks$edad))
as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
as.data.frame(table(ddrinks$Years))
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks)
summary(ddrinks$Years)
filtro = ddrinks$Edad < 55
dedadbaja = ddrinks[filtro, ]
as.data.frame(table(dedadbaja$Years))
summary(ddrinks$Years)
filtro = ddrinks$Edad < 55
dedadbaja = ddrinks[filtro, ]
as.data.frame(table(dedadbaja$Years))
ddrinks = df[filtro, ]
as.data.frame(table(ddrinks$Years))
filtro = ddrinks$Years < 55
dedadbaja = ddrinks[filtro, ]
as.data.frame(table(dedadbaja$Years))
colnames(ddrinks)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
as.data.frame(table(dedadbaja$Years))
colnames(ddrinks)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
filtro = ddrinks$Years < 55
dedadbaja = ddrinks[filtro, ]
colnames(dedadbaja)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-"Edad"
dedadbaja
colnames(dedadbaja)[1]<-"Edad"
as.data.frame(table(dedadbaja$Years))
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks$Years)
filtro = ddrinks$Years < 55
dedadbaja = ddrinks[filtro, ]
as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-"Edad"
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
ddrinks = as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks$Years)
filtro = ddrinks$Years < 55
dedadbaja = ddrinks[filtro, ]
dedadbaja = as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-"Edad"
dedadbaja = as.data.frame(table(dedadbaja$Years))
dedadbaja
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
ddrinks = as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks$Years)
source("~/Desktop/3º Ingeniería Informática + TDE/Big Data & Business Intelligence/proyecto/dataset-estudio.R", echo=TRUE)
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
ddrinks = as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks$Years)
ddrinks
ddrinks = as.data.frame(table(ddrinks$Years))
ddrinks
as.data.frame(table(ddrinks$Years))
ddrinks
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
ddrinks
as.data.frame(table(ddrinks$Years))
e = as.data.frame(table(ddrinks$Years))
e
colnames(e)[1]<-'Edad'
e
filtro = e$Edad < 55
filtro = as.integer(e$Edad) < 55
dedadbaja = eb[filtro, ]
dedadbaja = e[filtro, ]
eb = e
e = as.data.frame(table(ddrinks$Years))
eb = e
e
colnames(e)[1]<-'Edad'
colnames(eb)[1]<-'Edad'
summary(ddrinks$Years)
dedadbaja = eb[filtro, ]
dedadbaja
filtro = as.integer(e$Edad) < 55
dedadbaja = eb[filtro, ]
dedadbaja
e
filtro = as.integer(e$Edad) < 55
dedadbaja = eb[filtro, ]
dedadbaja
dedadbaja = as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-"Edad"
dedadbaja
#Visualizaciones de estadísticas
summary(df)
#Nivel académico de clientes con mayores ingresos anuales (dejando fuera a outlier y perteneciendo al 3er cuartil)
filtro=df$Income>68522&df$Income<666666
dff = df[filtro,]
dff
#Correlación de gasto en comida y bebida
g1 <- ggplot(data=df, aes(x=df$Food, y=df$Drinks)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g1+xlab("Cantidad gastada en comida")+ylab("Cantidad gastada en bebida")+ggtitle("Relación de las compras de los clientes respecto de comida y bebida")
source("~/Desktop/3º Ingeniería Informática + TDE/Big Data & Business Intelligence/proyecto/proyecto-Alejandra-Aida/dataset-estudio.R", echo=TRUE)
#Correlación de gasto en dulces con el número de hijos
g3 <- ggplot(data=dincome, aes(x=dincome$Income, y=dincome$Products)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g3+xlab("Ingresos")+ylab("Volumen de compra")+ggtitle("Relación de las compras de los clientes con mayor poder adquisitivo")
#Visualización en violín de recencia y la cantidad de productos comprados por cliente
data = data.frame(
name=df$Recency,
value=df$Products
)
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p + theme_classic()
#Childhome determina una mayor cantidad de productos comprados Products
ggplot(df, aes(x=df$Childhome, y=df$Products)) +
geom_point()
ggplot(df, aes(x=df$Childhome, y=df$Products), size = df$Compras) +
geom_point(alpha=0.7)
ggplot(df, aes(x=df$Childhome, y=df$Products), size = df$Compras) +
geom_point(alpha=0.7)
#Correlación de gasto en dulces con el número de hijos
g3 <- ggplot(data=df, aes(x=df$MntSweet, y=df$Childhome)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g3+xlab("Cantidad gastada en Dulces")+ylab("Número de niños")+ggtitle("Relación de las compras de los clientes en dulces y los potenciales niños en la familia")
#Correlación entre aqauellos con mayor poder adquisitivo y el volumen de compra
g3 <- ggplot(data=dincome, aes(x=dincome$Income, y=dincome$Products)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g3+xlab("Ingresos")+ylab("Volumen de compra")+ggtitle("Relación de las compras de los clientes con mayor poder adquisitivo")
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
v <- c(1,1)
#Se empieza en la esquina izquierda inferior, abajo a la izquierda.
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
v <- c(7,1)
#Se empieza en la esquina izquierda inferior, abajo a la izquierda.
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
v <- c(1,7)
#Se empieza en la esquina izquierda inferior, abajo a la izquierda.
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
v <- c(7,7)
#Se empieza en la esquina izquierda inferior, abajo a la izquierda.
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
ids_gs <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Analyze the result of all the executions
results <- analyze.results(list(bfs_ts, bfs_gs,
dfs_ts, dfs_gs,
dls6_ts, dls6_gs,
dls10_ts, dls10_gs,
ids_ts, ids_gs), problem)
# Print results in an HTML Table
kable_material(kbl(results, caption = "Laberinto"), c("striped", "hover"))
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
ids_gs <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Analyze the result of all the executions
results <- analyze.results(list(bfs_ts, bfs_gs,
dfs_ts, dfs_gs,
dls6_ts, dls6_gs,
dls10_ts, dls10_gs,
ids_ts, ids_gs), problem)
# Print results in an HTML Table
kable_material(kbl(results, caption = "Laberinto"), c("striped", "hover"))
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-2a.txt")
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
ids_gs <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Analyze the result of all the executions
results <- analyze.results(list(bfs_ts, bfs_gs,
dfs_ts, dfs_gs,
dls6_ts, dls6_gs,
dls10_ts, dls10_gs,
ids_ts, ids_gs), problem)
# Print results in an HTML Table
kable_material(kbl(results, caption = "Laberinto"), c("striped", "hover"))
