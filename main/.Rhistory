vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
sum = sum(vec)
dec = sum/10
num = sum%%10
sum = num+dec
vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
# problem$state_final       <- <INSERT CODE HERE>
problem$state_final         <- NULL
sum = sum(vec)
dec = sum/10
num = sum%%10
sum = as.Integer(num+dec)
sum = as.integer(num+dec)
vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# This attributes are compulsory
# problem$name              <- <INSERT CODE HERE>
problem$name                <- paste0("Murphys problem")
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
# problem$state_final       <- <INSERT CODE HERE>
problem$state_final         <- NULL
sum = sum(vec)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix)TRUE
# Analyzes if a state is final or not
is.final.state <- function (state, final_satate, problem) {
result <- FALSE # Default value is FALSE.
sum = sum(state)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix) result = TRUE
return(result)
}
result <- FALSE # Default value is FALSE.
sum = sum(state)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix) result = TRUE
return(result)
# There are 4 actions that move blank space: UP, DOWN, LEFT, RIGHT
problem$actions_possible  <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/8Puzzle.R", echo=TRUE)
View(initialize.problem)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/river-crossing-puzzle.R", echo=TRUE)
View(get.evaluation)
problem <- list()
# Compulsory attributes
problem$name <- paste0("River crossing puzzle")
problem$state_initial    <- data.frame(farmer = TRUE, wolf = TRUE, goat = TRUE, cabbage = TRUE)
# There is an action for the movement of each element from one side to the other
problem$actions_possible <- data.frame(action = c("farmer", "wolf", "goat", "cabbage"), stringsAsFactors = FALSE)
View(problem)
if (action == "C1") {
result[0] <- abs( result[0] - 9 )
return(result)
}
result[0] <- abs( result[0] - 9 )
state = c(7, 8, 7, 6, 8, 4, 4, 5)
action = "C1"
result <- state # Default value is the current state.
if (action == "C1") {
result[0] <- abs( result[0] - 9 )
return(result)
}
result[0] <- abs( result[0] - 9 )
result[1] <- abs( result[1] - 9 )
return(result)
abs(7-9)
result[1]
state = c(7, 8, 7, 6, 8, 4, 4, 5)
action = "C1"
result <- state # Default value is the current state.
result[1] <- abs( result[1] - 9 )
result[1] <- abs( result[1] - 9 )
result[1] <- abs( result[1] - 9 )
result[2] <- abs( result[2] - 9 )
result[3] <- abs( result[3] - 9 )
result[4] <- abs( result[4] - 9 )
result[5] <- abs( result[5] - 9 )
result[6] <- abs( result[6] - 9 )
result[7] <- abs( result[7] - 9 )
result[8] <- abs( result[8] - 9 )
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1)),as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3)))
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1)),as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3)))
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
get.state <- function(coordenadas){
return(problem$table[[coordenadas[1]+1,coordenadas[2]+1]])
}
state = c(2,2)
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
state[2]+1
problem$size[2]
state = c(2,2)
condicion1 <- problem$size[2] >= state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
get.state(state)
get.state(state)
get.state(c(state[1],state[2]+1))
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1)),as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3)))
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1)),as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3)))
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
state = c(2,2)
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
get.state(state)
get.state(c(state[1],state[2]+1))
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
condicion1 <- 0 < state[2]-1 #comprobacion de que no esta en el tope de abajo
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1],state[2]-1))
condicion1 <- 0 < state[1]-1 #comprobacion de que no esta en el tope de la izquierda
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1]-1,state[2]))
condicion1 <- problem$size[1] > state[1]+1 #comprobacion de que no esta en el tope de la derecha
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1]+1,state[2]))
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
problem <- list() # Default xvalue is an empty list.
function (x, ..., exact = TRUE)
{
na <- nargs() - !missing(exact)
if (!all(names(sys.call()) %in% c("", "exact")))
warning("named arguments other than 'exact' are discouraged")
if (na < 3L)
(function(x, i, exact) if (is.matrix(i))
as.matrix(x)[[i]]
else .subset2(x, i, exact = exact))(x, ..., exact = exact)
else {
col <- .subset2(x, ..2, exact = exact)
i <- if (is.character(..1))
pmatch(..1, row.names(x), duplicates.ok = TRUE)
else ..1
col[[i, exact = exact]]
}
}
problem <- list() # Default xvalue is an empty list.
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1)),as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3)))
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1)),as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3)))
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
get.state <- function(coordenadas){
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
state = c(2,2)
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
get.state(state)
get.state(c(state[1],state[2]+1))
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
if (condicion2) return(T)
condicion1 <- 0 < state[2]-1 #comprobacion de que no esta en el tope de abajo
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1],state[2]-1))
if (condicion2) return(T)
condicion1 <- 0 < state[1]-1 #comprobacion de que no esta en el tope de la izquierda
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1]-1,state[2]))
if (condicion2) return(T)
condicion1 <- problem$size[1] > state[1]+1 #comprobacion de que no esta en el tope de la derecha
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1]+1,state[2]))
if (condicion2) return(T)
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
View(problem)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
state = c(1,1)
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
get.state(state)
get.state(c(state[1],state[2]+1))
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
if (condicion2) return(T)
condicion1 <- 0 < state[2]-1 #comprobacion de que no esta en el tope de abajo
if (!condicion1) return(F)
state = c(problem$size[1],problem[2])
action = "Up"
if (action == "Up") {
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
get.state(state)
get.state(c(state[1],state[2]+1))
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
if (condicion2) return(T)
}
state = c(1,1)
action = "Down"
condicion1 <- 0 < state[2]-1 #comprobacion de que no esta en el tope de abajo
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1],state[2]-1))
condicion2 <- get.state(state) != get.state(c(state[1],state[2]-1))
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
get.state(state)
get.state(c(state[1],state[2]+1))
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
if (condicion2) return(T)
state = c(problem$size[1],problem[2])
action = "Up"
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
state = c(problem$size[1],problem[2])
function (x, ..., exact = TRUE)
state = c(problem$size[1],problem[2])
state = c(problem$size[1],problem[2])
action = "Up"
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
state = c(problem$size[1],problem[2])
action = "Up"
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
condicion2 <- get.state(state) != get.state(c(state[1],state[2]+1))
state = c(problem$size[1],problem[2])
problem$size[2]
state = c(problem$size[1],problem[2])
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
state = c(problem$size[1],problem[2])
action = "Up"
problem$size[2]
problem$size[2]
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
state = c(problem$size[1],problem[2])
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
get.state <- function(coordenadas){
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
state = c(problem$size[1],problem[2])
action = "Up"
problem$size[2]
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
state[2]+1
state[2]
problem$size[2]
state[2]
state = c(7,7)
problem$size[2]
state[2]
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
state = c(7,7)
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
get.state <- function(coordenadas){
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
state = c(1,1)
condicion1 <- 0 < state[2]-1 #comprobacion de que no esta en el tope de abajo
if (!condicion1) return(F)
condicion1 <- 0 < state[1]-1 #comprobacion de que no esta en el tope de la izquierda
if (!condicion1) return(F)
state = c(7,7)
condicion1 <- problem$size[1] > state[1]+1 #comprobacion de que no esta en el tope de la derecha
if (!condicion1) return(F)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/laberinto.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt")
View(problem)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
View(bfs_gs)
bfs_gs[["report"]][["nodes_frontier"]]
bfs_gs[["report"]]
