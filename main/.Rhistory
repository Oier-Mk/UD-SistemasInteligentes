v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
if (action == "Right") {
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de la derecha
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1],state[2]+1),problem)
if (condicion2) return(T)
}
state = c(7,1)
state = c(7,1)
if (action == "Right") {
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de la derecha
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1],state[2]+1),problem)
if (condicion2) return(T)
}
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de la derecha
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1],state[2]+1),problem)
if (condicion2) return(T)
get.state(state,problem)
get.state(c(state[1],state[2]+1),problem)
state = c(7,0)
if (!condicion1) return(F)
get.state(state,problem)
state = c(7,1)
get.state(state,problem)
get.state(c(state[1],state[2]+1),problem)
state = c(7,1)
get.state(c(state[1],state[2]+1),problem)
print(coordenadas[1])
get.state
get.state <- function(coordenadas, problem){
print(coordenadas[1])
print(coordenadas[2])
return(problem$table[coordenadas[2],coordenadas[1]])     #columna, fila
#return(problem$table[coordenadas[1],coordenadas[2]])
}
get.state
get.state(c(1, 1), problem)
get.state(c(state[1],state[2]+1),problem)
get.state(c(1, 2), problem)
state(1,1)
state = c(1,1)
get.state(c(state[1],state[2]+1),problem)
#fila 1
get.state(c(1, 1), problem)
get.state(c(1, 2), problem)
get.state(c(1, 3), problem)
get.state(c(1, 4), problem)
get.state(c(1, 5), problem)
get.state(c(1, 6), problem)
get.state(c(1, 7), problem)
#fila 2
get.state(c(2, 1), problem)
get.state(c(2, 2), problem)
get.state(c(2, 3), problem)
get.state(c(2, 4), problem)
get.state(c(2, 5), problem)
get.state(c(2, 6), problem)
get.state(c(2, 7), problem)
#fila 3
get.state(c(3, 1), problem)
get.state(c(3, 2), problem)
get.state(c(3, 3), problem)
get.state(c(3, 4), problem)
get.state(c(3, 5), problem)
get.state(c(3, 6), problem)
get.state(c(3, 7), problem)
#fila 4
get.state(c(4, 1), problem)
get.state(c(4, 2), problem)
get.state(c(4, 3), problem)
get.state(c(4, 4), problem)
get.state(c(4, 5), problem)
get.state(c(4, 6), problem)
get.state(c(4, 7), problem)
#fila 5
get.state(c(5, 1), problem)
get.state(c(5, 2), problem)
get.state(c(5, 3), problem)
get.state(c(5, 4), problem)
get.state(c(5, 5), problem)
get.state(c(5, 6), problem)
get.state(c(5, 7), problem)
#fila 6
get.state(c(6, 1), problem)
get.state(c(6, 2), problem)
get.state(c(6, 3), problem)
get.state(c(6, 4), problem)
get.state(c(6, 5), problem)
get.state(c(6, 6), problem)
get.state(c(6, 7), problem)
#fila 7
get.state(c(7, 1), problem)
get.state(c(7, 2), problem)
get.state(c(7, 3), problem)
get.state(c(7, 4), problem)
get.state(c(7, 5), problem)
get.state(c(7, 6), problem)
get.state(c(7, 7), problem)
get.state <- function(coordenadas, problem){
print(coordenadas[1])
print(coordenadas[2])
#return(problem$table[coordenadas[2],coordenadas[1]])     #columna, fila
return(problem$table[coordenadas[1],coordenadas[2]])
}
problem <- list() # Default xvalue is an empty list.
#file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/laberinto.txt"
# This function must return a list with the information needed to solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem <- function(file) {
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
return(problem)
}
get.state <- function(coordenadas, problem){
print(coordenadas[1])
print(coordenadas[2])
#return(problem$table[coordenadas[2],coordenadas[1]])     #columna, fila
return(problem$table[coordenadas[1],coordenadas[2]])
}
#fila 1
get.state(c(1, 1), problem)
get.state(c(1, 2), problem)
get.state(c(1, 3), problem)
get.state(c(1, 4), problem)
get.state(c(1, 5), problem)
get.state(c(1, 6), problem)
get.state(c(1, 7), problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
return(problem)
# This function must return a list with the information needed to solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem <- function(file) {
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
return(problem)
}
get.state <- function(coordenadas, problem){
print(coordenadas[1])
print(coordenadas[2])
#return(problem$table[coordenadas[2],coordenadas[1]])     #columna, fila
return(problem$table[coordenadas[1],coordenadas[2]])
}
#fila 1
get.state(c(1, 1), problem)
get.state(c(1, 2), problem)
get.state(c(1, 3), problem)
get.state(c(1, 4), problem)
get.state(c(1, 5), problem)
get.state(c(1, 6), problem)
get.state(c(1, 7), problem)
#fila 2
get.state(c(2, 1), problem)
get.state(c(2, 2), problem)
get.state(c(2, 3), problem)
get.state(c(2, 4), problem)
get.state(c(2, 5), problem)
get.state(c(2, 6), problem)
get.state(c(2, 7), problem)
#fila 3
get.state(c(3, 1), problem)
get.state(c(3, 2), problem)
get.state(c(3, 3), problem)
get.state(c(3, 4), problem)
get.state(c(3, 5), problem)
get.state(c(3, 6), problem)
get.state(c(3, 7), problem)
#fila 4
get.state(c(4, 1), problem)
get.state(c(4, 2), problem)
get.state(c(4, 3), problem)
get.state(c(4, 4), problem)
get.state(c(4, 5), problem)
get.state(c(4, 6), problem)
get.state(c(4, 7), problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
problem <- initialize.pro blem("../data/feet-maze-1a.txt")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
source("~/Documents/sinteligentes/main/P1-main-laberinto.R", echo=TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
source("~/Documents/sinteligentes/main/P1-main-laberinto.R", echo=TRUE)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = FALSE)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, trace = FALSE, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, trace = FALSE, count_print = 1000, graph_search = TRUE)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
# This function must return a list with the information needed to solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem <- function(file) {
problem <- list() # Default xvalue is an empty list.
#file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
return(problem)
}
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
#fila 1
get.state(c(1, 1), problem)
get.state(c(1, 2), problem)
get.state(c(1, 3), problem)
get.state(c(1, 4), problem)
get.state(c(1, 5), problem)
get.state(c(1, 6), problem)
get.state(c(1, 7), problem)
problem <- list() # Default xvalue is an empty list.
#file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
return(problem)
get.state <- function(coordenadas, problem){
# print(coordenadas[1])
# print(coordenadas[2])
#return(problem$table[coordenadas[2],coordenadas[1]])     #columna, fila
return(problem$table[coordenadas[1],coordenadas[2]]) #fila, columna - de izquierda a derecha y de arriba a abajo
}
# Analyzes if an action can be applied in the received state.
# Estado lo que varia y problema lo que mantiene estatico
is.applicable <- function (state, action, problem) {
result <- FALSE # Default value is FALSE.
# state = c(7,7)
# action = "Up"
if (action == "Up") {
condicion1 <- 0 < state[2]-1 #columnas - comprobacion de que no esta en el tope de arriba
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1],state[2]-1),problem)  #leer posición en el table
if (condicion2) return(T)
}
# state = c(1,1)
# action = "Down"
if (action == "Down") {
condicion1 <- problem$size[2] > state[2]+1 #comprobacion de que no esta en el tope de abajo
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1],state[2]+1),problem)
if (condicion2) return(T)
}
# state = c(1,1)
# action = "Left"
if (action == "Left") {
condicion1 <- 0 < state[1]-1 #comprobacion de que no esta en el tope de la izquierda
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1]-1,state[2]),problem)
if (condicion2) return(T)
}
state = c(7,1)
#action = "Right"
if (action == "Right") {
condicion1 <- problem$size[1] > state[2]+1 #comprobacion de que no esta en el tope de la derecha
if (!condicion1) return(F)
condicion2 <- get.state(state,problem) != get.state(c(state[1]+1,state[2]),problem)
if (condicion2) return(T)
}
return(result)
}
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("../data/feet-maze-1a.txt")
v <- problem$state_initial
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
ids_gs <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
v
v = c(1, 1)
is.applicable(v,"Up",problem)
is.applicable(v,"Down",problem)
is.applicable(v,"Left",problem)
is.applicable(v,"Right",problem)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
