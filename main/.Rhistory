problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/abcd-laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
state = (1,2)
state = c(1,2)
get.state <- function(coordenadas){
return(problem$table[[coordenadas[2],coordenadas[1]]])
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
state = c(1,2)
get.state(state)
problem[["table"]]
return(problem$table[[coordenadas[1],coordenadas[2]]])
get.state <- function(coordenadas){
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
c
c
state = c(1,2)
get.state(state)
problem[["table"]]
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem <- list() # Default xvalue is an empty list.
file = "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
-
file = "../data/sudoku-1.txt"
file <- "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem <- initialize.problem("../data/sudoku-1.txt") # Easy sudoku - Only 7 blank numbers
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem <- list() # Default xvalue is an empty list.
file = "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1b.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$down                <- read.csv(file, sep=";", header = FALSE, skip=4+problem$size[1], nrows=1)
problem$left                <- read.csv(file, sep=";", header = FALSE, skip=5+problem$size[1], nrows=1)
problem$right               <- read.csv(file, sep=";", header = FALSE, skip=6+problem$size[1], nrows=1)
array = int[]
array
array <- c()
array <- c()
for (val in problem$up){
array <- append(array,c(as.integer(substr(val,1,1)),as.integer(substr(val,3,3))))
}
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
array <- c()
for (val in problem$up){
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
for (val in problem$up){
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
array <- c()
for (val in problem$up){
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
array[1]
array[1]
array[2]
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- c()
for (val in problem$up){
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
for (val in problem$up){
a <- as.integer(substr(val,1,1))
b <- as.integer(substr(val,3,3))
}
c(a,b)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P2-main-p-hub.R", echo=TRUE)
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = filename, p = p)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams)
results_df  <- test.local.beam.search(file, p, beams)
results <- data.frame(execute.local.beam.search(problem))
test.local.beam.search <- function(filename, p, beams) {
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = filename, p = p)
results <- data.frame(execute.local.beam.search(problem))
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = filename, p = p)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
p           <- 3
beams       <- 10
results_df  <- test.local.beam.search(file, p, beams)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 10
results_df  <- test.local.beam.search(file, p, beams)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
times       <- 1
results_df  <- test.local.beam.search(file, p, beams,times)
test.local.beam.search <- function(filename, p, beams, times) {
results <- vector(mode = "list", length = beams)
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = filename, p = p)
for (i in 1:times) {
results[[i]] <- execute.local.beam.search(problem)
}
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/informed/hill-climbing-search.R")
source("../algorithms/informed/random-restart-hill-climbing-search.R")
source("../algorithms/informed/local-beam-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
# Include the problem
source("../problem/p-hub-problem.R")
# Executes hill climbing search and return the results
execute.random.restart.hill.climbing <- function(filename, p, times) {
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
problems <- vector(mode = "list", length = times)
for (i in 1:times) {
problems[[i]] <- initialize.problem(filename, p)
results[[i]] <- random.restart.hill.climbing.search(problems[[i]])
}
# Analyze results
results_df <- one.by.one.analyze.results(results, problems)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
get.best.one <- function(results_df){
bestEvaluated <- results_df[order(results_df$Evaluation),]
return(bestEvaluated[1,])
}
# Executes hill climbing search and return the results
execute.hill.climbing <- function(filename, p) {
# Initialize problem
problem <- initialize.problem(p = p, filename = filename)
# Execute hill climbing
return(hill.climbing.search(problem = problem))
}
# Execute Hill Climbing several times and analyze results
test.hill.climbing <- function(file, p, times) {
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Executes local beam search and return the results
execute.local.beam.search <- function(problem) {
# Execute local beam search
return(local.beam.search(problem = problem))
}
test.local.beam.search <- function(filename, p, beams, times) {
results <- vector(mode = "list", length = beams)
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = filename, p = p)
for (i in 1:times) {
results[[i]] <- execute.local.beam.search(problem)
}
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Clear console
cat("\014")
graphics.off()
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
times       <- 1
results_df  <- test.local.beam.search(file, p, beams,times)
p           <- 3
beams       <- 3
times       <- 3
results_df  <- test.local.beam.search(file, p, beams,times)
local.beam.search(initialize.problem("../data/p-hub/AP40.txt", 3),3)
local.beam.search(problem = initialize.problem("../data/p-hub/AP40.txt", 3),beams = 3)
prob = initialize.problem("../data/p-hub/AP40.txt", 3)
results = local.beam.search(problem = prob,beams = 3)
results_df <- local.analyze.results(results, problem)
results = local.beam.search(problem = prob,beams = 3)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams,times)
results_df  <- test.local.beam.search(file, p, beams,times)
results_df  <- test.local.beam.search(file, p, beams,times)
results_df  <- test.local.beam.search(file, p, beams,times)
beams3      <- get.best.one(results_df)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P2-main-p-hub.R", echo=TRUE)
# Executes local beam search and return the results
execute.local.beam.search <- function(problem) {
# Execute local beam search
return(local.beam.search(problem = problem))
}
test.local.beam.search <- function(filename, p, beams) {
results <- vector(mode = "list", length = beams)
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = filename, p = p)
results[[1]] <- execute.local.beam.search(problem)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams,times)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams)
p           <- 3
beams       <- 10
results_df  <- test.local.beam.search(file, p, beams)
beams10     <- get.best.one(results_df)
p           <- 3
beams       <- 10
results_df  <- test.local.beam.search(file, p, beams)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams)
beams3      <- get.best.one(results_df)
test.local.beam.search <- function(filename, p, beams) {
results <- vector(mode = "list", length = 1)
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = filename, p = p)
results[[1]] <- execute.local.beam.search(problem)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams)
beams3      <- get.best.one(results_df)
file        <- "../data/p-hub/AP40.txt"
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/informed/hill-climbing-search.R")
source("../algorithms/informed/random-restart-hill-climbing-search.R")
source("../algorithms/informed/local-beam-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
# Include the problem
source("../problem/p-hub-problem.R")
# Executes hill climbing search and return the results
execute.random.restart.hill.climbing <- function(filename, p, times) {
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
problems <- vector(mode = "list", length = times)
for (i in 1:times) {
problems[[i]] <- initialize.problem(filename, p)
results[[i]] <- random.restart.hill.climbing.search(problems[[i]])
}
# Analyze results
results_df <- one.by.one.analyze.results(results, problems)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
get.best.one <- function(results_df){
bestEvaluated <- results_df[order(results_df$Evaluation),]
return(bestEvaluated[1,])
}
# Executes hill climbing search and return the results
execute.hill.climbing <- function(filename, p) {
# Initialize problem
problem <- initialize.problem(p = p, filename = filename)
# Execute hill climbing
return(hill.climbing.search(problem = problem))
}
# Execute Hill Climbing several times and analyze results
test.hill.climbing <- function(file, p, times) {
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Executes local beam search and return the results
execute.local.beam.search <- function(problem) {
# Execute local beam search
return(local.beam.search(problem = problem))
}
test.local.beam.search <- function(filename, p, beams) {
results <- vector(mode = "list", length = 1)
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = filename, p = p)
results[[1]] <- execute.local.beam.search(problem)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Clear console
cat("\014")
graphics.off()
d
d
d
d
d
file        <- "../data/p-hub/AP40.txt"
file        <- "../data/p-hub/AP40.txt"
file        <- "../data/p-hub/AP40.txt"
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams)
beams3      <- get.best.one(results_df)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 5
results_df  <- test.local.beam.search(file, p, beams)
beams5      <- get.best.one(results_df)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 10
results_df  <- test.local.beam.search(file, p, beams)
beams10     <- get.best.one(results_df)
result      <- rbind(hc10,hc20,hc50,rr10,rr20,rr50,beams3,beams5,beams10)
kable_material(kbl(result, caption = "RESULT p-hub AP40"),  c("striped", "hover", "condensed", "responsive"))
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P2-main-p-hub.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P2-main-p-hub.R", echo=TRUE)
# result      <- rbind(hc10,hc20,hc50,rr10,rr20,rr50,beams3,beams5,beams10)
result      <- rbind(beams3,beams5,beams10)
kable_material(kbl(result, caption = "RESULT p-hub AP40"),  c("striped", "hover", "condensed", "responsive"))
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 3
results_df  <- test.local.beam.search(file, p, beams)
beams3      <- get.best.one(results_df)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 5
results_df  <- test.local.beam.search(file, p, beams)
beams5      <- get.best.one(results_df)
file        <- "../data/p-hub/AP40.txt"
p           <- 3
beams       <- 10
results_df  <- test.local.beam.search(file, p, beams)
beams10     <- get.best.one(results_df)
# result      <- rbind(hc10,hc20,hc50,rr10,rr20,rr50,beams3,beams5,beams10)
result      <- rbind(beams3,beams5,beams10)
kable_material(kbl(result, caption = "RESULT p-hub AP40"),  c("striped", "hover", "condensed", "responsive"))
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P2-main-p-hub.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P2-main-p-hub.R", echo=TRUE)
