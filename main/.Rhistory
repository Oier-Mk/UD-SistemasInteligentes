result[1] <- abs( result[1] - 9 )
result[2] <- abs( result[2] - 9 )
result[3] <- abs( result[3] - 9 )
result[4] <- abs( result[4] - 9 )
result[5] <- abs( result[5] - 9 )
result[6] <- abs( result[6] - 9 )
result[7] <- abs( result[7] - 9 )
result[8] <- abs( result[8] - 9 )
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/abcd-laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/abcd-laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
state = (1,2)
state = c(1,2)
get.state <- function(coordenadas){
return(problem$table[[coordenadas[2],coordenadas[1]]])
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
state = c(1,2)
get.state(state)
problem[["table"]]
return(problem$table[[coordenadas[1],coordenadas[2]]])
get.state <- function(coordenadas){
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
c
c
state = c(1,2)
get.state(state)
problem[["table"]]
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem <- list() # Default xvalue is an empty list.
file = "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
-
file = "../data/sudoku-1.txt"
file <- "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem <- initialize.problem("../data/sudoku-1.txt") # Easy sudoku - Only 7 blank numbers
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem <- list() # Default xvalue is an empty list.
file = "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1b.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$down                <- read.csv(file, sep=";", header = FALSE, skip=4+problem$size[1], nrows=1)
problem$left                <- read.csv(file, sep=";", header = FALSE, skip=5+problem$size[1], nrows=1)
problem$right               <- read.csv(file, sep=";", header = FALSE, skip=6+problem$size[1], nrows=1)
array = int[]
array
array <- c()
array <- c()
for (val in problem$up){
array <- append(array,c(as.integer(substr(val,1,1)),as.integer(substr(val,3,3))))
}
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
array <- c()
for (val in problem$up){
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
for (val in problem$up){
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
array <- c()
for (val in problem$up){
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
array[1]
array[1]
array[2]
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- c()
for (val in problem$up){
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
for (val in problem$up){
a <- as.integer(substr(val,1,1))
b <- as.integer(substr(val,3,3))
}
c(a,b)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3b.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3b.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3b.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$down                <- read.csv(file, sep=";", header = FALSE, skip=4+problem$size[1], nrows=1)
problem$left                <- read.csv(file, sep=";", header = FALSE, skip=5+problem$size[1], nrows=1)
problem$right               <- read.csv(file, sep=";", header = FALSE, skip=6+problem$size[1], nrows=1)
return(problem)
problem[["table"]]
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3b.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3b.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$left                <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$right               <- read.csv(file, sep=";", header = FALSE, skip=4+problem$size[1], nrows=1)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=5+problem$size[1], nrows=1)
problem$down                <- read.csv(file, sep=";", header = FALSE, skip=6+problem$size[1], nrows=1)
get.state <- function(coordenadas, problem){
return(problem$table[coordenadas[1],coordenadas[2]])      #fila, columna - se lee la matriz de izquierda a derecha y de arriba a abajo
}
transform.state <- function(state){
#De c(x,y) -> "x,y"
value <- c(state[1]+1,state[2]+1)
result <- toString(value)
result <- gsub(" ", "", result)
return(result)
}
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3b.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3b.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-3b.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
ids_gs <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Analyze the result of all the executions
results <- analyze.results(list(bfs_ts, bfs_gs,
dfs_ts, dfs_gs,
dls6_ts, dls6_gs,
dls10_ts, dls10_gs,
ids_ts, ids_gs), problem)
# Print results in an HTML Table
kable_material(kbl(results, caption = "Laberinto"), c("striped", "hover"))
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-ab.txt")
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-ab.txt")
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-ab.txt")
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1b.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$left                <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$right               <- read.csv(file, sep=";", header = FALSE, skip=4+problem$size[1], nrows=1)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=5+problem$size[1], nrows=1)
problem$down                <- read.csv(file, sep=";", header = FALSE, skip=6+problem$size[1], nrows=1)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-ab.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-ab.txt")
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1b.txt")
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
ids_gs <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Analyze the result of all the executions
results <- analyze.results(list(bfs_ts, bfs_gs,
dfs_ts, dfs_gs,
dls6_ts, dls6_gs,
dls10_ts, dls10_gs,
ids_ts, ids_gs), problem)
# Print results in an HTML Table
kable_material(kbl(results, caption = "Laberinto"), c("striped", "hover"))
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/blind/breadth-first-search.R")
source("../algorithms/blind/depth-first-search.R")
source("../algorithms/blind/depth-limited-search.R")
source("../algorithms/blind/iterative-deepening-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
source("../problem/Laberinto.R")
problem <- initialize.problem("/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-2b.txt")
bfs_ts <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000)
bfs_gs <- breadth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dfs_ts <- depth.first.search(problem, max_iterations = 2500, count_print = 1000)
dfs_gs <- depth.first.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls6_ts <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000)
dls6_gs <- depth.limited.search(problem, depth_limit = 6, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
dls10_ts <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000)
dls10_gs <- depth.limited.search(problem, depth_limit = 49, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
ids_ts <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000)
ids_gs <- iterative.deepening.search(problem, max_iterations = 2500, count_print = 1000, graph_search = TRUE)
# Analyze the result of all the executions
results <- analyze.results(list(bfs_ts, bfs_gs,
dfs_ts, dfs_gs,
dls6_ts, dls6_gs,
dls10_ts, dls10_gs,
ids_ts, ids_gs), problem)
# Print results in an HTML Table
kable_material(kbl(results, caption = "Laberinto"), c("striped", "hover"))
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
