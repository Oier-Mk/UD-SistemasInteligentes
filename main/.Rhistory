source("../algorithms/blind/expand-node.R")
source("../algorithms/informed/hill-climbing-search.R")
source("../algorithms/informed/random-restart-hill-climbing-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
# Include the problem
source("../problem/p-hub-problem.R")
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p) {
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Clear console
cat("\014")
graphics.off()
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
source("../algorithms/informed/hill-climbing-search.R")
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/informed/hill-climbing-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
# Include the problem
source("../problem/p-hub-problem.R")
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- hill.climbing.search(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- hill.climbing.search(filename,p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- hill.climbing.search(filename,p)
}
# Initialize a problem instance for the analysis
# problem <- initialize.problem(filename = file, p = p)
#
# # Analyze results
# results_df <- local.analyze.results(results, problem)
#
# print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
#              " - Mean: ", round(mean(results_df$Evaluation), 2),
#              " - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
# print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
#              " - Mean: ", round(mean(results_df$Runtime), 2),
#              " - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
file        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- hill.climbing.search(filename,p)
}
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- hill.climbing.search(filename,p)
}
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p = p, filename = filename)
results[[i]] <- hill.climbing.search(filename,p)
}
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p, filename)
results[[i]] <- hill.climbing.search(filename,p)
}
# Initialize a problem instance for the analysis
# problem <- initialize.problem(filename = file, p = p)
#
# # Analyze results
# results_df <- local.analyze.results(results, problem)
#
# print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
#              " - Mean: ", round(mean(results_df$Evaluation), 2),
#              " - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
# print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
#              " - Mean: ", round(mean(results_df$Runtime), 2),
#              " - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p, filename)
results[[i]] <- hill.climbing.search(filename,p)
}
problem <- initialize.problem(p, filename)
problem <- initialize.problem(p, filename)
problem <- initialize.problem(p, filename)
problem <- initialize.problem(p, filename)
problem <- initialize.problem(p, filename)
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
problem <- initialize.problem(p, filename)
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
# p           <- 3
# times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(p, filename)
results[[i]] <- hill.climbing.search(filename,p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
# p           <- 3
# times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(filename,p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
print("sale de la funcion")
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
problem <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(filename,p)
for (i in 1:times) {
problem <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(filename,p)
}
for (i in 1:times) {
problem <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(problem)
}
b
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(problem)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
# p           <- 3
# times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
problem <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(problem)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
print("sale de la funcion")
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
# p           <- 3
# times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
problems <- vector(mode = "list", length = times)
for (i in 1:times) {
problems[[i]] <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(problem)
}
# Analyze results
results_df <- one.by.one.analyze.results(results, problems)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/informed/hill-climbing-search.R")
source("../algorithms/informed/random-restart-hill-climbing-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
# Include the problem
source("../problem/p-hub-problem.R")
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
# filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
# p           <- 3
# times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
problems <- vector(mode = "list", length = times)
for (i in 1:times) {
problems[[i]] <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(problem)
}
# Analyze results
results_df <- one.by.one.analyze.results(results, problems)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Clear console
cat("\014")
graphics.off()
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
print("sale de la funcion")
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
# Clear console
cat("\014")
graphics.off()
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
problems <- vector(mode = "list", length = times)
for (i in 1:times) {
problems[[i]] <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(problem)
}
# Executes hill climbing search and return the results
execute.rr.hill.climbing <- function(filename, p, times) {
filename        <- "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/p-hub/AP100.txt"
p           <- 3
times       <- 10
# Initialize problem
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
problems <- vector(mode = "list", length = times)
for (i in 1:times) {
problems[[i]] <- initialize.problem(filename, p)
results[[i]] <- hill.climbing.search(problems[[i]])
}
# Analyze results
results_df <- one.by.one.analyze.results(results, problems)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
results_df  <- execute.rr.hill.climbing(file,p,times) #test.random.restart.hill.climbing(file, p, times)
print("sale de la funcion")
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
