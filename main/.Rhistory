theme(legend.position="none") +
coord_equal()
ggplot() +
# Make the bubbles
geom_polygon(data = df, aes(df$Childhome, y=df$Products), colour = "black", alpha = 0.6) +
# Add text in the center of each bubble + control its size
geom_text(data = df, aes(df$Childhome, y=df$Products, size=df$Childhome, label = "Número de hijos: ")) +
scale_size_continuous(range = c(1,4)) +
# General theme:
theme_void() +
theme(legend.position="none") +
coord_equal()
ggplot() +
# Make the bubbles
geom_polygon(data = df, aes(df$Childhome, y=df$Products), colour = "black", alpha = 0.6) +
# Add text in the center of each bubble + control its size
geom_text(data = df, aes(df$Childhome, y=df$Products, label = "Número de hijos: ")) +
scale_size_continuous(range = c(1,4)) +
# General theme:
theme_void() +
theme(legend.position="none") +
coord_equal()
ggplot(df, aes(x=df$Childhome, y=df$Products), size = df$Compras) +
geom_point(alpha=0.7)
# Most basic violin chart
p <- ggplot(df, aes(x=df$Childhome, y=df$Products, fill=df$Childhome)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
table(df$Childhome, df$Products)
dataframe<-as.data.frame(table(df$Childhome, df$Products))
dataframe
dataframe<-as.data.frame(table(df$Childhome))
dataframe
colnames(dataframe)[1]<-'NHijos'
dataframe
colnames(dataframe)[2]<-'Frequencia'
dataframe
dataframe
table(df$Childhome, df$Products)
table(df$Products)
filtro = df$Childhome == 0
dhijos0 = df[filtro,]
dhijos0
dhijos0$Compras
subset.data.frame(dhijos0$Compras)
dhijos0=select(dhijos0$Compras)
dhijos0 = df[filtro,]
dhijos0 = df[filtro,]
dhijos0
mediahijos0 = mean(dhijos0$Compras)
sdhijos0 = sd(dhijos0$Compras)
filtro = df$Childhome == 0
dhijos0 = df[filtro,]
dhijos0
mediahijos0 = mean(dhijos0$Compras)
sdhijos0 = sd(dhijos0$Compras)
filtro = df$Childhome ==
dhijos1 = df[filtro,]
dhijos1
mediahijos1 = mean(dhijos1$Compras)
sdhijos1 = sd(dhijos1$Compras)
filtro = df$Childhome == 2
dhijos2 = df[filtro,]
dhijos2
mediahijos2 = mean(dhijos2$Compras)
sdhijos2 = sd(dhijos2$Compras)
filtro = df$Childhome == 3
dhijos3 = df[filtro,]
dhijos3
mediahijos3 = mean(dhijos3$Compras)
sdhijos3 = sd(dhijos3$Compras)
subset(dhijos3$Childhome, dhijos3$Compras)
select(dhijos3$Childhome, dhijos3$Compras)
subset(x = df, subset = df$Childhome == 0, select = c("Childhome", "Compras"))
dHijos0 = subset(x = df, subset = df$Childhome == 0, select = c("Childhome", "Compras"))
dHijos1 = subset(x = df, subset = df$Childhome == 1, select = c("Childhome", "Compras"))
dHijos2 = subset(x = df, subset = df$Childhome == 2, select = c("Childhome", "Compras"))
dHijos3 = subset(x = df, subset = df$Childhome == 3, select = c("Childhome", "Compras"))
dataframe
# create a dataset
data <- data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# Most basic violin chart
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
data <- data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# Most basic violin chart
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat <- data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat = data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat = data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# create a dataset
dat = data.frame(
name=c(rep("0",633), rep("1",1117), rep("2",416), rep("3",50)),
value=c(dHijos0, dHijos1, dHijos2, dHijos3)
)
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
# install.packages("ggplot2")
library(ggplot2)
# install.packages("dplyr")
library(dplyr)
# install.packages("hrbrthemes")
library(hrbrthemes)
#Carga de datos previamente limpiados
df <- read.csv ("/Users/aidagomezbuenoberezo/dataset-limpio.csv", header=TRUE, sep=",")
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
summary(df)
df$Compras = df$NumWebPurchases + df$NumStorePurchases
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Compras
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
select(df$Recency, df$Compras)
df$Compras = as.integer(df$Compras)
)
select(df$Recency, df$Compras)
df$Compras = as.integer(df$Compras)
select(df$Recency, df$Compras)
select(as.integer(df$Recency), as.integer(df$Compras))
View(df)
View(df)
df$Products = df$Food + df$MntWines
# create a dataset
dat = data.frame(
name=df$Recency,
value=df$Products
)
# Most basic violin chart
p <- ggplot(dat, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
data = data.frame(
name=df$Recency,
value=df$Products
)
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados")
data = data.frame(
name=df$Recency,
value=df$Products
)
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados")
p
data = data.frame(
name=df$Recency,
value=df$Products
)
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + theme_pink()
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + col("pink")
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="pink") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") +
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="pink") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") +
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="pink") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") +
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p <- ggplot(data, aes(x=name, y=value, fill=name, colour="pink")) + # fill=name allow to automatically dedicate a color for each group
geom_violin() + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="pink") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes") + fill("pink")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(colour="", fill="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ff9ced") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p
p + theme_classic()
data1 = data.frame(
name=df$Childhome,
value=df$Products
)
p <- ggplot(data1, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p + theme_classic()
data1 = data.frame(
name=df$Products,
value=df$Childhome
)
p <- ggplot(data1, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p + theme_classic()
data1 = data.frame(
name=df$Childhome,
value=df$Products
)
p <- ggplot(data1, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Niños por familia") + ylab("Productos comprados") + ggtitle("Amplitud de familia y volumen de compra")
p + theme_classic()
#Nivel académico de clientes con mayores ingresos anuales (dejando fuera a outlier y perteneciendo al 3er cuartil)
filtro=df$Income>68522&df$Income<666666
dff = df[filtro,]
#Visualización en violín de ingresos por familia y la cantidad de productos comprados
filtro=df$Income>68522&df$Income<666666
dincome = df[filtro, ]
data2 = data.frame(
name=dincome$Income,
value=dincome$Products
)
#Visualización en violín de ingresos altos por familia y la cantidad de productos comprados
filtro=df$Income>68522&df$Income<666666
dincome = df[filtro, ]
data2 = data.frame(
name=dincome$Income,
value=dincome$Products
)
p <- ggplot(data2, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Ingresos altos por familia") + ylab("Productos comprados") + ggtitle("Gran poder adquisitivo y volumen de compra")
p + theme_classic()
#Correlación de gasto en dulces con el número de hijos
g3 <- ggplot(data=dincome, aes(x=dincome$Income, y=dincome$Products)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g3+xlab("Ingresos")+ylab("Volumen de compra")+ggtitle("Relación de las compras de los clientes con mayor poder adquisitivo")
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
table(df$Years, df$Drinks)
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
table(df$Years)
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Years))
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Years, df$Drinks))
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks))
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505
ddrinks = df[filtro, ]
as.data.frame(table(ddrinks$edad))
as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
as.data.frame(table(ddrinks$Years))
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks)
summary(ddrinks$Years)
filtro = ddrinks$Edad < 55
dedadbaja = ddrinks[filtro, ]
as.data.frame(table(dedadbaja$Years))
summary(ddrinks$Years)
filtro = ddrinks$Edad < 55
dedadbaja = ddrinks[filtro, ]
as.data.frame(table(dedadbaja$Years))
ddrinks = df[filtro, ]
as.data.frame(table(ddrinks$Years))
filtro = ddrinks$Years < 55
dedadbaja = ddrinks[filtro, ]
as.data.frame(table(dedadbaja$Years))
colnames(ddrinks)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
as.data.frame(table(dedadbaja$Years))
colnames(ddrinks)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
filtro = ddrinks$Years < 55
dedadbaja = ddrinks[filtro, ]
colnames(dedadbaja)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-'Edad'
as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-"Edad"
dedadbaja
colnames(dedadbaja)[1]<-"Edad"
as.data.frame(table(dedadbaja$Years))
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks$Years)
filtro = ddrinks$Years < 55
dedadbaja = ddrinks[filtro, ]
as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-"Edad"
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
ddrinks = as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks$Years)
filtro = ddrinks$Years < 55
dedadbaja = ddrinks[filtro, ]
dedadbaja = as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-"Edad"
dedadbaja = as.data.frame(table(dedadbaja$Years))
dedadbaja
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
ddrinks = as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks$Years)
source("~/Desktop/3º Ingeniería Informática + TDE/Big Data & Business Intelligence/proyecto/dataset-estudio.R", echo=TRUE)
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
ddrinks = as.data.frame(table(ddrinks$Years))
colnames(ddrinks)[1]<-'Edad'
summary(ddrinks$Years)
ddrinks
ddrinks = as.data.frame(table(ddrinks$Years))
ddrinks
as.data.frame(table(ddrinks$Years))
ddrinks
#Seleccionar cliente con mayor cantidad de productos comprados, para que sea un buen ejemplo
as.data.frame(table(df$Drinks, df$Years))
summary(df$Drinks)
filtro = df$Drinks>505 & df$Years<123
ddrinks = df[filtro, ]
ddrinks
as.data.frame(table(ddrinks$Years))
e = as.data.frame(table(ddrinks$Years))
e
colnames(e)[1]<-'Edad'
e
filtro = e$Edad < 55
filtro = as.integer(e$Edad) < 55
dedadbaja = eb[filtro, ]
dedadbaja = e[filtro, ]
eb = e
e = as.data.frame(table(ddrinks$Years))
eb = e
e
colnames(e)[1]<-'Edad'
colnames(eb)[1]<-'Edad'
summary(ddrinks$Years)
dedadbaja = eb[filtro, ]
dedadbaja
filtro = as.integer(e$Edad) < 55
dedadbaja = eb[filtro, ]
dedadbaja
e
filtro = as.integer(e$Edad) < 55
dedadbaja = eb[filtro, ]
dedadbaja
dedadbaja = as.data.frame(table(dedadbaja$Years))
colnames(dedadbaja)[1]<-"Edad"
dedadbaja
#Visualizaciones de estadísticas
summary(df)
#Nivel académico de clientes con mayores ingresos anuales (dejando fuera a outlier y perteneciendo al 3er cuartil)
filtro=df$Income>68522&df$Income<666666
dff = df[filtro,]
dff
#Correlación de gasto en comida y bebida
g1 <- ggplot(data=df, aes(x=df$Food, y=df$Drinks)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g1+xlab("Cantidad gastada en comida")+ylab("Cantidad gastada en bebida")+ggtitle("Relación de las compras de los clientes respecto de comida y bebida")
source("~/Desktop/3º Ingeniería Informática + TDE/Big Data & Business Intelligence/proyecto/proyecto-Alejandra-Aida/dataset-estudio.R", echo=TRUE)
#Correlación de gasto en dulces con el número de hijos
g3 <- ggplot(data=dincome, aes(x=dincome$Income, y=dincome$Products)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g3+xlab("Ingresos")+ylab("Volumen de compra")+ggtitle("Relación de las compras de los clientes con mayor poder adquisitivo")
#Visualización en violín de recencia y la cantidad de productos comprados por cliente
data = data.frame(
name=df$Recency,
value=df$Products
)
p <- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group
geom_violin(fill="#ffc7f5") + xlab("Recencia") + ylab("Cantidad de productos comprados") + ggtitle("Recencia y Fidelidad de clientes")
p + theme_classic()
#Childhome determina una mayor cantidad de productos comprados Products
ggplot(df, aes(x=df$Childhome, y=df$Products)) +
geom_point()
ggplot(df, aes(x=df$Childhome, y=df$Products), size = df$Compras) +
geom_point(alpha=0.7)
ggplot(df, aes(x=df$Childhome, y=df$Products), size = df$Compras) +
geom_point(alpha=0.7)
#Correlación de gasto en dulces con el número de hijos
g3 <- ggplot(data=df, aes(x=df$MntSweet, y=df$Childhome)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g3+xlab("Cantidad gastada en Dulces")+ylab("Número de niños")+ggtitle("Relación de las compras de los clientes en dulces y los potenciales niños en la familia")
#Correlación entre aqauellos con mayor poder adquisitivo y el volumen de compra
g3 <- ggplot(data=dincome, aes(x=dincome$Income, y=dincome$Products)) +
geom_point() +
geom_rug(col="pink",alpha=0.1, size=1.5)
g3+xlab("Ingresos")+ylab("Volumen de compra")+ggtitle("Relación de las compras de los clientes con mayor poder adquisitivo")
# Install required packages
library(ggplot2)
library(lattice)
library(caret)
library(RKEEL)
library(stringr)
install.packages("RKEEL")
install.packages("stringr")
install.packages("stringr")
library(RKEEL)
library(stringr)
# Print Mean Absolute Error
print(paste0("- Mean average error: ", mean_avg_error))
source("~/Documents/repos/sinteligentes/main/P3-linear-regression-insurances.R", echo=TRUE)
install.packages("caret")
library(caret)
source("~/Documents/repos/sinteligentes/main/P3-linear-regression-insurances.R", echo=TRUE)
source("~/Documents/repos/sinteligentes/main/P4.1-decision-tree-car-selling-seller-type.R", echo=TRUE)
View(rules)
View(rules)
source("~/Documents/repos/sinteligentes/main/P4.2-decision-tree-car-selling-owner.R", echo=TRUE)
source("~/Documents/repos/sinteligentes/main/P4.2-decision-tree-car-selling-owner.R", echo=TRUE)
source("~/Documents/repos/sinteligentes/main/P3-linear-regression-insurances.R", echo=TRUE)
View(mayor_incremento)
View(mayor_incremento)
View(data)
View(data)
scatter.smooth(x=data$age, y=data$charges, main="X vs. Y")
scatter.smooth(x=data$sex, y=data$charges, main="X vs. Y")
scatter.smooth(x=data$bmi, y=data$charges, main="X vs. Y")
scatter.smooth(x=data$children, y=data$charges, main="X vs. Y")
scatter.smooth(x=data$age, y=data$charges, main="X vs. Y")
# Print Mean Absolute Error
print(paste0("- Mean average error: ", mean_avg_error))
View(model)
View(model)
print(model)
print(model)
