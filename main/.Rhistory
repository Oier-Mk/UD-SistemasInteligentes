vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
sum = sum(vec)
dec = sum/10
num = sum%%10
sum = num+dec
vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
# problem$state_final       <- <INSERT CODE HERE>
problem$state_final         <- NULL
sum = sum(vec)
dec = sum/10
num = sum%%10
sum = as.Integer(num+dec)
sum = as.integer(num+dec)
vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# This attributes are compulsory
# problem$name              <- <INSERT CODE HERE>
problem$name                <- paste0("Murphys problem")
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
# problem$state_final       <- <INSERT CODE HERE>
problem$state_final         <- NULL
sum = sum(vec)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix)TRUE
# Analyzes if a state is final or not
is.final.state <- function (state, final_satate, problem) {
result <- FALSE # Default value is FALSE.
sum = sum(state)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix) result = TRUE
return(result)
}
result <- FALSE # Default value is FALSE.
sum = sum(state)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix) result = TRUE
return(result)
# There are 4 actions that move blank space: UP, DOWN, LEFT, RIGHT
problem$actions_possible  <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/8Puzzle.R", echo=TRUE)
View(initialize.problem)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/river-crossing-puzzle.R", echo=TRUE)
View(get.evaluation)
problem <- list()
# Compulsory attributes
problem$name <- paste0("River crossing puzzle")
problem$state_initial    <- data.frame(farmer = TRUE, wolf = TRUE, goat = TRUE, cabbage = TRUE)
# There is an action for the movement of each element from one side to the other
problem$actions_possible <- data.frame(action = c("farmer", "wolf", "goat", "cabbage"), stringsAsFactors = FALSE)
View(problem)
if (action == "C1") {
result[0] <- abs( result[0] - 9 )
return(result)
}
result[0] <- abs( result[0] - 9 )
state = c(7, 8, 7, 6, 8, 4, 4, 5)
action = "C1"
result <- state # Default value is the current state.
if (action == "C1") {
result[0] <- abs( result[0] - 9 )
return(result)
}
result[0] <- abs( result[0] - 9 )
result[1] <- abs( result[1] - 9 )
return(result)
abs(7-9)
result[1]
state = c(7, 8, 7, 6, 8, 4, 4, 5)
action = "C1"
result <- state # Default value is the current state.
result[1] <- abs( result[1] - 9 )
result[1] <- abs( result[1] - 9 )
result[1] <- abs( result[1] - 9 )
result[2] <- abs( result[2] - 9 )
result[3] <- abs( result[3] - 9 )
result[4] <- abs( result[4] - 9 )
result[5] <- abs( result[5] - 9 )
result[6] <- abs( result[6] - 9 )
result[7] <- abs( result[7] - 9 )
result[8] <- abs( result[8] - 9 )
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/abcd-laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/abcd-laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
state = (1,2)
state = c(1,2)
get.state <- function(coordenadas){
return(problem$table[[coordenadas[2],coordenadas[1]]])
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
state = c(1,2)
get.state(state)
problem[["table"]]
return(problem$table[[coordenadas[1],coordenadas[2]]])
get.state <- function(coordenadas){
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
c
c
state = c(1,2)
get.state(state)
problem[["table"]]
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem <- list() # Default xvalue is an empty list.
file = "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
-
file = "../data/sudoku-1.txt"
file <- "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem <- initialize.problem("../data/sudoku-1.txt") # Easy sudoku - Only 7 blank numbers
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem <- list() # Default xvalue is an empty list.
file = "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1b.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$down                <- read.csv(file, sep=";", header = FALSE, skip=4+problem$size[1], nrows=1)
problem$left                <- read.csv(file, sep=";", header = FALSE, skip=5+problem$size[1], nrows=1)
problem$right               <- read.csv(file, sep=";", header = FALSE, skip=6+problem$size[1], nrows=1)
array = int[]
array
array <- c()
array <- c()
for (val in problem$up){
array <- append(array,c(as.integer(substr(val,1,1)),as.integer(substr(val,3,3))))
}
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
array <- c()
for (val in problem$up){
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
for (val in problem$up){
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
array <- c()
for (val in problem$up){
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
array[1]
array[1]
array[2]
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- c()
for (val in problem$up){
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
for (val in problem$up){
a <- as.integer(substr(val,1,1))
b <- as.integer(substr(val,3,3))
}
c(a,b)
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clear console
cat("\014")
# Clean workspace
rm(list=ls())
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Install required packages
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
# Read data from CSV
filename = "../data/covid-19-symptoms.tab"
data <- read.csv(file = filename, sep =" ", header = TRUE)
knitr::kable(head (data), caption = "A glipmse of the data")
# Percentaje of training examples
training_p <- 0.8
# Generate data partition 80% training / 20% test. The result is a vector with the indexes
# of the examples that will be used for the training of the model.
training_indexes <- createDataPartition(y = data$TARGET, p = training_p, list = FALSE)
# Split training and test data
training_data <- data[training_indexes, ]  # Extract training data using training_indexes
test_data     <- data[-training_indexes, ] # Extract data with the indexes not included in training_indexes
# Create Linear Model using training data. Formula = all the columns except Salary
model <- rpart(formula = TARGET ~., data = training_data)
# Make the prediction using the model and test data
prediction <- predict(model, test_data, type = "class")
# Calculate accuracy using Confusion Matrix
prediction_results <- table(test_data$TARGET, prediction)
matrix <- confusionMatrix(prediction_results)
accuracy <- matrix$overall[1]
# Print the accuracy
accuracy <- paste0("Accuracy = ", round(100*accuracy, digits = 2), "%")
print(accuracy, quote = FALSE)
# Print attributes in descending relevance
attrs <- names(model$variable.importance)
print("Attributes in descending order of relevance")
for (i in 1:length(attrs)) {
print(paste0("  ", attrs[i]), quote = FALSE)
}
# Plot tree (this method is slow, wait until pot is completed)
rpart.plot(model,
type = 2,
extra = 102,
tweak = 1.1,
box.palette = "GnYlRd",
shadow.col = "darkgray",
main = "Go to hospital or stay at home?",
sub = accuracy)
# Clear Environment
rm(list=ls())
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Clear plots & console
if(!is.null(dev.list())) dev.off()
cat("\014")
# Install required packages
library(ggplot2)
library(lattice)
library(caret)
library(RKEEL)
library(stringr)
# Read data from CSV
data <- read.csv("../data/insurance.csv")
# Percentage of training examples
training_p <- 0.8
# Generate data partition 80% training / 20% test. The result is a vector with
# the indexes of the examples that will be used for the training of the model.
training_indexes <- createDataPartition(y = data$charges, p = training_p, list = FALSE)
# Split training and test data
training_data <- data[training_indexes, ]  # Extract training data using training_indexes
test_data     <- data[-training_indexes, ] # Extract data with the indexes not included in training_indexes
best <- NULL
error_ratio <- 10000
for(i in 1:10){ #Training 10 times the model and getting the one with best resoults
# Create Linear Model using training data. Formula = all the columns except charges
model <- lm(formula = charges ~., data = training_data)
# Make the prediction using the model and test data
prediction <- predict(model, test_data)
# Calculate Mean Average Error
mean_avg_error <- mean(abs(prediction - test_data$charges))
if( mean_avg_error < error_ratio){
best <- model
error_ratio <- mean_avg_error
}
}
# Print Mean Absolute Error
print(paste0("- Mean average error: ", mean_avg_error))
# Print model summary
summary(model)
