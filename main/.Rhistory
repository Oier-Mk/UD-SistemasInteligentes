vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
sum = sum(vec)
dec = sum/10
num = sum%%10
sum = num+dec
vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
# problem$state_final       <- <INSERT CODE HERE>
problem$state_final         <- NULL
sum = sum(vec)
dec = sum/10
num = sum%%10
sum = as.Integer(num+dec)
sum = as.integer(num+dec)
vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# This attributes are compulsory
# problem$name              <- <INSERT CODE HERE>
problem$name                <- paste0("Murphys problem")
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
# problem$state_final       <- <INSERT CODE HERE>
problem$state_final         <- NULL
sum = sum(vec)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix)TRUE
# Analyzes if a state is final or not
is.final.state <- function (state, final_satate, problem) {
result <- FALSE # Default value is FALSE.
sum = sum(state)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix) result = TRUE
return(result)
}
result <- FALSE # Default value is FALSE.
sum = sum(state)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix) result = TRUE
return(result)
# There are 4 actions that move blank space: UP, DOWN, LEFT, RIGHT
problem$actions_possible  <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/8Puzzle.R", echo=TRUE)
View(initialize.problem)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/river-crossing-puzzle.R", echo=TRUE)
View(get.evaluation)
problem <- list()
# Compulsory attributes
problem$name <- paste0("River crossing puzzle")
problem$state_initial    <- data.frame(farmer = TRUE, wolf = TRUE, goat = TRUE, cabbage = TRUE)
# There is an action for the movement of each element from one side to the other
problem$actions_possible <- data.frame(action = c("farmer", "wolf", "goat", "cabbage"), stringsAsFactors = FALSE)
View(problem)
if (action == "C1") {
result[0] <- abs( result[0] - 9 )
return(result)
}
result[0] <- abs( result[0] - 9 )
state = c(7, 8, 7, 6, 8, 4, 4, 5)
action = "C1"
result <- state # Default value is the current state.
if (action == "C1") {
result[0] <- abs( result[0] - 9 )
return(result)
}
result[0] <- abs( result[0] - 9 )
result[1] <- abs( result[1] - 9 )
return(result)
abs(7-9)
result[1]
state = c(7, 8, 7, 6, 8, 4, 4, 5)
action = "C1"
result <- state # Default value is the current state.
result[1] <- abs( result[1] - 9 )
result[1] <- abs( result[1] - 9 )
result[1] <- abs( result[1] - 9 )
result[2] <- abs( result[2] - 9 )
result[3] <- abs( result[3] - 9 )
result[4] <- abs( result[4] - 9 )
result[5] <- abs( result[5] - 9 )
result[6] <- abs( result[6] - 9 )
result[7] <- abs( result[7] - 9 )
result[8] <- abs( result[8] - 9 )
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/abcd-laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem <- list() # Default xvalue is an empty list.
file = "~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/abcd-laberinto.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size)
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1)
problem$state_final       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
state = (1,2)
state = c(1,2)
get.state <- function(coordenadas){
return(problem$table[[coordenadas[2],coordenadas[1]]])
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
state = c(1,2)
get.state(state)
problem[["table"]]
return(problem$table[[coordenadas[1],coordenadas[2]]])
get.state <- function(coordenadas){
return(problem$table[[coordenadas[1],coordenadas[2]]])
}
c
c
state = c(1,2)
get.state(state)
problem[["table"]]
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/aidagomezbuenoberezo/Documents/sinteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem <- list() # Default xvalue is an empty list.
file = "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
-
file = "../data/sudoku-1.txt"
file <- "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem <- initialize.problem("../data/sudoku-1.txt") # Easy sudoku - Only 7 blank numbers
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem <- list() # Default xvalue is an empty list.
file = "../data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1a.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
View(problem)
problem <- list() # Default xvalue is an empty list.
file = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/data/feet-maze-1b.txt"
# This attributes are compulsory
problem$name                <- paste0("Laberinto - [", file, "]")
problem$size                <- c(as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[1]),as.integer(read.csv(file, sep=";", header = FALSE, nrows=1)[2]))
problem$table               <- read.csv(file, sep=";", header = FALSE, skip=1, nrows=problem$size[1])
problem$state_initial       <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=1+problem$size[1], nrows=1), 1,1))+1)
problem$state_final         <- c(as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 3,3))+1,as.integer(substr(read.csv(file, sep=";", header = FALSE, skip=2+problem$size[1], nrows=1), 1,1))+1)
problem$actions_possible    <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$up                  <- read.csv(file, sep=";", header = FALSE, skip=3+problem$size[1], nrows=1)
problem$down                <- read.csv(file, sep=";", header = FALSE, skip=4+problem$size[1], nrows=1)
problem$left                <- read.csv(file, sep=";", header = FALSE, skip=5+problem$size[1], nrows=1)
problem$right               <- read.csv(file, sep=";", header = FALSE, skip=6+problem$size[1], nrows=1)
array = int[]
array
array <- c()
array <- c()
for (val in problem$up){
array <- append(array,c(as.integer(substr(val,1,1)),as.integer(substr(val,3,3))))
}
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
array <- c()
for (val in problem$up){
c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) )
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
for (val in problem$up){
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
array <- c()
for (val in problem$up){
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- append(array,c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
array[1]
array[1]
array[2]
print(c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
array <- c()
for (val in problem$up){
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
}
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
append(array, c( as.integer(substr(val,1,1)) , as.integer(substr(val,3,3)) ))
for (val in problem$up){
a <- as.integer(substr(val,1,1))
b <- as.integer(substr(val,3,3))
}
c(a,b)
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/informed/hill-climbing-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
# Include the problem
source("../problem/p-hub-problem.R")
# Executes hill climbing search and return the results
execute.hill.climbing <- function(filename, p) {
# Initialize problem
problem <- initialize.problem(p = p, filename = filename)
# Execute hill climbing
return(hill.climbing.search(problem = problem))
}
# Execute Hill Climbing several times and analyze results
test.hill.climbing <- function(file, p, times) {
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Clear console
cat("\014")
graphics.off()
file        <- "../data/p-hub/AP40.txt"
p           <- 4
times       <- 10
results_df  <- test.hill.climbing(file, p, times)
View(results_df)
source("../algorithms/informed/random-restart-hill-climbing-search.R")
# Executes hill climbing search and return the results
execute.random.restart.hill.climbing <- function(filename, p) {
# Initialize problem
problem <- initialize.problem(p = p, filename = filename)
# Execute hill climbing
return(random.restart.hill.climbing.search(problem = problem))
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- test.random.restart.hill.climbing(file, p, times)
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
# Execute Hill Climbing several times and analyze results
test.random.restart.hill.climbing <- function(file, p, times) {
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- test.random.restart.hill.climbing(file, p, times)
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
# Clear environment and console
rm(list=ls())
cat("\014")
graphics.off()
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Import the libraries needed to display the results
library(kableExtra)
library(magrittr)
# Include algorithm functions
source("../algorithms/blind/expand-node.R")
source("../algorithms/informed/hill-climbing-search.R")
source("../algorithms/informed/random-restart-hill-climbing-search.R")
# Include functions for data analysis and result plot
source("../algorithms/results-analysis/analyze-results.R")
# Include the problem
source("../problem/p-hub-problem.R")
# Executes hill climbing search and return the results
execute.hill.climbing <- function(filename, p) {
# Initialize problem
problem <- initialize.problem(p = p, filename = filename)
# Execute hill climbing
return(hill.climbing.search(problem = problem))
}
# Executes hill climbing search and return the results
execute.random.restart.hill.climbing <- function(filename, p) {
# Initialize problem
problem <- initialize.problem(p = p, filename = filename)
# Execute hill climbing
return(random.restart.hill.climbing.search(problem = problem))
}
# Execute Hill Climbing several times and analyze results
test.random.restart.hill.climbing <- function(file, p, times) {
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Execute Hill Climbing several times and analyze results
test.hill.climbing <- function(file, p, times) {
# Execute hill climbing 'n' times
results <- vector(mode = "list", length = times)
for (i in 1:times) {
results[[i]] <- execute.hill.climbing(filename = file, p = p)
}
# Initialize a problem instance for the analysis
problem <- initialize.problem(filename = file, p = p)
# Analyze results
results_df <- local.analyze.results(results, problem)
print(paste0("Best evaluation: ", round(min(results_df$Evaluation), 2),
" - Mean: ", round(mean(results_df$Evaluation), 2),
" - SD: ", round(sd(results_df$Evaluation), 2)), quote = FALSE)
print(paste0("Best runtime: ", round(min(results_df$Runtime), 2),
" - Mean: ", round(mean(results_df$Runtime), 2),
" - SD: ", round(sd(results_df$Runtime), 2)), quote = FALSE)
return(results_df)
}
# Clear console
cat("\014")
graphics.off()
file        <- "../data/p-hub/AP40.txt"
p           <- 4
times       <- 10
results_df  <- test.hill.climbing(file, p, times)
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP40"),  c("striped", "hover", "condensed", "responsive"))
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- test.hill.climbing(file, p, times)
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- test.random.restart.hill.climbing(file, p, times)
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
file        <- "../data/p-hub/AP100.txt"
p           <- 3
times       <- 10
results_df  <- test.random.restart.hill.climbing(file, p, times)
# Print results in an HTML Table
kable_material(kbl(results_df, caption = "p-hub AP100"),  c("striped", "hover", "condensed", "responsive"))
View(execute.random.restart.hill.climbing)
