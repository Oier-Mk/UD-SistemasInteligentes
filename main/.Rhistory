vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
sum = sum(vec)
dec = sum/10
num = sum%%10
sum = num+dec
vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
# problem$state_final       <- <INSERT CODE HERE>
problem$state_final         <- NULL
sum = sum(vec)
dec = sum/10
num = sum%%10
sum = as.Integer(num+dec)
sum = as.integer(num+dec)
vec = c(7, 8, 7, 6, 8, 4, 4, 5, 5)
# This attributes are compulsory
# problem$name              <- <INSERT CODE HERE>
problem$name                <- paste0("Murphys problem")
# problem$state_initial     <- <INSERT CODE HERE>
nix = vec[length(vec)]
vec = head( vec, -1)
# problem$state_final       <- <INSERT CODE HERE>
problem$state_final         <- NULL
sum = sum(vec)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix)TRUE
# Analyzes if a state is final or not
is.final.state <- function (state, final_satate, problem) {
result <- FALSE # Default value is FALSE.
sum = sum(state)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix) result = TRUE
return(result)
}
result <- FALSE # Default value is FALSE.
sum = sum(state)
dec = as.integer(sum/10)
num = sum%%10
sum = num+dec
if (sum == nix) result = TRUE
return(result)
# There are 4 actions that move blank space: UP, DOWN, LEFT, RIGHT
problem$actions_possible  <- data.frame(direction = c("Up", "Down", "Left", "Right"), stringsAsFactors = FALSE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/8Puzzle.R", echo=TRUE)
View(initialize.problem)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/river-crossing-puzzle.R", echo=TRUE)
View(get.evaluation)
problem <- list()
# Compulsory attributes
problem$name <- paste0("River crossing puzzle")
problem$state_initial    <- data.frame(farmer = TRUE, wolf = TRUE, goat = TRUE, cabbage = TRUE)
# There is an action for the movement of each element from one side to the other
problem$actions_possible <- data.frame(action = c("farmer", "wolf", "goat", "cabbage"), stringsAsFactors = FALSE)
View(problem)
if (action == "C1") {
result[0] <- abs( result[0] - 9 )
return(result)
}
result[0] <- abs( result[0] - 9 )
state = c(7, 8, 7, 6, 8, 4, 4, 5)
action = "C1"
result <- state # Default value is the current state.
if (action == "C1") {
result[0] <- abs( result[0] - 9 )
return(result)
}
result[0] <- abs( result[0] - 9 )
result[1] <- abs( result[1] - 9 )
return(result)
abs(7-9)
result[1]
state = c(7, 8, 7, 6, 8, 4, 4, 5)
action = "C1"
result <- state # Default value is the current state.
result[1] <- abs( result[1] - 9 )
result[1] <- abs( result[1] - 9 )
result[1] <- abs( result[1] - 9 )
result[2] <- abs( result[2] - 9 )
result[3] <- abs( result[3] - 9 )
result[4] <- abs( result[4] - 9 )
result[5] <- abs( result[5] - 9 )
result[6] <- abs( result[6] - 9 )
result[7] <- abs( result[7] - 9 )
result[8] <- abs( result[8] - 9 )
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/problem/Laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/2do Semestre/Sistemas Inteligentes/main/P1-main-laberinto.R", echo=TRUE)
